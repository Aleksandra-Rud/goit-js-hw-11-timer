{"version":3,"sources":["index.js"],"names":["CountdownTimer","constructor","selector","targetDate","timerId","getRefs","timerContainer","document","querySelector","days","hours","mins","secs","updateTimer","currentDate","Date","now","time","daysLeft","Math","floor","console","log","hoursLeft","minsLeft","secsLeft","textContent","toString","padStart","clearTimer","startTimer","setInterval","clearInterval","timer","timer2"],"mappings":";AAAA,MAAMA,EACJC,aAAY,SAAEC,EAAF,WAAYC,IACjBD,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EACbC,KAAAA,QAAU,KAEjBC,UACQC,MAAAA,EAAiBC,SAASC,cAAc,KAAKN,UAM5C,MAAA,CAAEO,KALIH,EAAeE,cAAc,uBAK3BE,MAJDJ,EAAeE,cAAc,wBAIrBG,KAHTL,EAAeE,cAAc,uBAGdI,KAFfN,EAAeE,cAAc,wBAI5CK,aAAY,KAAEJ,EAAF,MAAQC,EAAR,KAAeC,EAAf,KAAqBC,IACzBE,MAAAA,EAAcC,KAAKC,MACnBC,EAAO,KAAKd,WAAaW,EAQzBI,EAAWC,KAAKC,MAAMH,EAAQ,OACpCI,QAAQC,IAAIL,GACNM,MAAAA,EAAYJ,KAAKC,MACpBH,EAAQ,MAAyB,MAE9BO,EAAWL,KAAKC,MAAOH,EAAQ,KAAoB,KACnDQ,EAAWN,KAAKC,MAAOH,EAAQ,IAAc,KAGnDR,EAAKiB,YAAcR,EAASS,WAAWC,SAAS,EAAG,KACnDlB,EAAMgB,YAAcH,EAAUI,WAAWC,SAAS,EAAG,KACrDjB,EAAKe,YAAcF,EAASG,WAAWC,SAAS,EAAG,KACnDhB,EAAKc,YAAcD,EAASE,WAAWC,SAAS,EAAG,KAE/CX,EAAO,KACJY,KAAAA,aAITC,aACO1B,KAAAA,QAAU2B,YAAY,KACpBlB,KAAAA,YAAY,KAAKR,YACrB,KAELwB,aACEG,cAAc,KAAK5B,UAIvB,MAAM6B,EAAQ,IAAIjC,EAAe,CAC/BE,SAAU,WACVC,WAAY,IAAIY,KAAK,kBAGjBmB,EAAS,IAAIlC,EAAe,CAChCE,SAAU,WACVC,WAAY,IAAIY,KAAK,uBAGvBkB,EAAMH,aACNI,EAAOJ,aACPT,QAAQC,IAAIW","file":"src.7f23bce2.js","sourceRoot":"../src","sourcesContent":["class CountdownTimer {\n  constructor({ selector, targetDate }) {\n    this.selector = selector;\n    this.targetDate = targetDate;\n    this.timerId = null;\n  }\n  getRefs() {\n    const timerContainer = document.querySelector(this.selector);\n    const days = timerContainer.querySelector('[data-value=\"days\"]');\n    const hours = timerContainer.querySelector('[data-value=\"hours\"]');\n    const mins = timerContainer.querySelector('[data-value=\"mins\"]');\n    const secs = timerContainer.querySelector('[data-value=\"secs\"]');\n\n    return { days, hours, mins, secs };\n  }\n  updateTimer({ days, hours, mins, secs }) {\n    const currentDate = Date.now();\n    const time = this.targetDate - currentDate;\n    // days.textContent = Math.floor(time / (1000 * 60 * 60 * 24));\n    // hours.textContent = Math.floor(\n    //   (time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n    // );\n    // mins.textContent = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\n    // secs.textContent = Math.floor((time % (1000 * 60)) / 1000);\n\n    const daysLeft = Math.floor(time / (1000 * 60 * 60 * 24));\n    console.log(time);\n    const hoursLeft = Math.floor(\n      (time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n    );\n    const minsLeft = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\n    const secsLeft = Math.floor((time % (1000 * 60)) / 1000);\n\n    // days.textContent = daysLeft < 10 ? `0${daysLeft}` : daysLeft;\n    days.textContent = daysLeft.toString().padStart(2, \"0\");\n    hours.textContent = hoursLeft.toString().padStart(2, \"0\");\n    mins.textContent = minsLeft.toString().padStart(2, \"0\");\n    secs.textContent = secsLeft.toString().padStart(2, \"0\");\n\n    if (time < 1000) {\n      this.clearTimer();\n    }\n  }\n\n  startTimer() {\n    this.timerId = setInterval(() => {\n      this.updateTimer(this.getRefs());\n    }, 1000);\n  }\n  clearTimer() {\n    clearInterval(this.timerId);\n  }\n}\n\nconst timer = new CountdownTimer({\n  selector: \"#timer-1\",\n  targetDate: new Date(\"Jul 17, 2022\"),\n});\n\nconst timer2 = new CountdownTimer({\n  selector: \"#timer-2\",\n  targetDate: new Date(\"Aug 9, 2021 12:38\"),\n});\n\ntimer.startTimer();\ntimer2.startTimer();\nconsole.log(timer);\n"]}